<?php

namespace App\Services;

use App\Enums\SourceTypeEnum;

class BiblioParserService
{
    public function parse(string $raw): array
    {
        $data = [
            'authors' => [],
            'title' => null,
            'year' => null,
            'publisher' => null,
            'type' => 'book', // –¥–µ—Ñ–æ–ª—Ç
        ];

        // 1) –ü—Ä–∏–±—Ä–∞—Ç–∏ –Ω—É–º–µ—Ä–∞—Ü—ñ—é "16." –Ω–∞ –ø–æ—á–∞—Ç–∫—É
        $normalized = preg_replace('/^\s*\d+\s*[\.\)]\s*/u', '', $raw);

        // 2) –î–µ—Ç–µ–∫—Ç–æ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤ (—Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∞–±—Ä–µ–≤—ñ–∞—Ç—É—Ä)
        if (preg_match('/^\s*(ISO(?:\/IEC)?|IEC|NIST|RFC|IETF|ETSI|EN|BSI?|–î–°–¢–£|DSTU|–ì–û–°–¢)\b/iu', $normalized))
        {
            $data['type'] = 'standard';

            // --- 2a) –í–ê–†–Ü–ê–ù–¢ –ó –ö–û–î–û–ú (ISO/IEC 27001:2018. *Title* Publisher, 2018.)
            if (preg_match(
                '/^(?P<code>(?:ISO(?:\/IEC)?|IEC|EN|BSI?|–î–°–¢–£|DSTU|–ì–û–°–¢)[^\.]+)\.\s*' .                  // code –¥–æ –∫—Ä–∞–ø–∫–∏
                '(?P<titleItalics>\*.*?\*)' .                                                           // –∫—É—Ä—Å–∏–≤–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                '(?:\.\s*(?P<version>(?:Version|Rev\.?|Ed\.?|Edition)\s*[\w\.\-]+))?' .                 // –æ–ø—Ü—ñ–π–Ω–∞ –≤–µ—Ä—Å—ñ—è
                '(?:,\s*(?P<publisher>[^,\.]+))?' .                                                     // –æ–ø—Ü—ñ–π–Ω–∏–π –≤–∏–¥–∞–≤–µ—Ü—å
                '(?:,\s*(?P<year>\d{4}))?' .                                                            // –æ–ø—Ü—ñ–π–Ω–∏–π —Ä—ñ–∫
                '\.?/u',
                $normalized,
                $m1
            )) {
                $code   = trim($m1['code']);
                $titleI = trim($m1['titleItalics']);
                $title  = rtrim($code, '.') . '. ' . rtrim($titleI, '.');

                if (!empty($m1['version'])) {
                    $title .= ' ' . trim($m1['version']);
                }

                $data['title'] = $title;
                if (!empty($m1['publisher'])) $data['publisher'] = trim($m1['publisher']);
                if (!empty($m1['year']))      $data['year']      = (int) $m1['year'];

                return $data;
            }

            // --- 2b) –í–ê–†–Ü–ê–ù–¢ –ë–ï–ó –ö–û–î–£ (NIST. *Title* Version 1.1, Publisher, 2020.)
            if (preg_match(
                '/^(?P<org>(?:NIST|RFC|IETF|ETSI|BSI?|EN|–î–°–¢–£|DSTU|–ì–û–°–¢))\.\s*' .                        // –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è + –∫—Ä–∞–ø–∫–∞
                '(?P<titleItalics>\*.*?\*)' .                                                           // –∫—É—Ä—Å–∏–≤–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                '(?:\s*(?P<version>(?:Version|Rev\.?|Ed\.?|Edition)\s*[\w\.\-]+))?' .                   // –æ–ø—Ü—ñ–π–Ω–∞ –≤–µ—Ä—Å—ñ—è
                '(?:,\s*(?P<publisher>[^,\.]+))?' .                                                     // –æ–ø—Ü—ñ–π–Ω–∏–π –≤–∏–¥–∞–≤–µ—Ü—å
                '(?:,\s*(?P<year>\d{4}))?' .                                                            // –æ–ø—Ü—ñ–π–Ω–∏–π —Ä—ñ–∫
                '\.?/u',
                $normalized,
                $m2
            )) {
                $org    = trim($m2['org']);
                $titleI = trim($m2['titleItalics']);

                // –°–∫–ª–µ—é—î–º–æ —Å–∞–º–µ —Ç–∞–∫, —è–∫ —Ç–∏ —Ö–æ—á–µ—à –±–∞—á–∏—Ç–∏ —É title:
                // "NIST. *Framework ‚Ä¶* Version 1.1"
                $title = $org . '. ' . rtrim($titleI, '.');
                if (!empty($m2['version'])) {
                    $title .= ' ' . trim($m2['version']);
                }

                $data['title'] = $title;
                if (!empty($m2['publisher'])) $data['publisher'] = trim($m2['publisher']);
                if (!empty($m2['year']))      $data['year']      = (int) $m2['year'];

                return $data;
            }

            // --- 2c) –§–æ–ª–±–µ–∫ –¥–ª—è –µ–∫–∑–æ—Ç–∏–∫–∏: —è–∫—â–æ –Ω–µ –≤–ø—ñ–∑–Ω–∞–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–µ –ª–∞–º–∞–π —ñ–º–ø–æ—Ä—Ç
            // —Å–ø—Ä–æ–±—É—î–º–æ –≤–∑—è—Ç–∏ –≤—Å–µ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ ", YYYY" —è–∫ title
            if (preg_match('/^(?<beforeYear>.+?),\s*\d{4}\.?$/u', $normalized, $mx)) {
                $data['title'] = rtrim(trim($mx['beforeYear']), '.');
            } else {
                // –∞–±–æ —Ü—ñ–ª–∫–æ–º —Ä—è–¥–æ–∫ (–±–µ–∑ –∫—ñ–Ω—Ü–µ–≤–æ—ó –∫—Ä–∞–ø–∫–∏)
                $data['title'] = rtrim($normalized, '.');
            }

            return $data;
        }

        // –í–∏—Ç—è–≥ —Ä–æ–∫—É
        if (preg_match('/\((\d{4})\)/', $raw, $matches)) {
            $data['year'] = $matches[1];
        }

        // –í–∏—Ç—è–≥ –∞–≤—Ç–æ—Ä—ñ–≤
        if (preg_match('/^(.+?)\s*\(\d{4}\)/u', $raw, $matches)) {
            $authorBlock = trim($matches[1]);
            $authorParts = preg_split('/,\s*|&| —ñ | —Ç–∞ | and /u', $authorBlock);
            $authors = [];

            foreach ($authorParts as $part) {
                $part = trim($part);
                if ($part === '') {
                    continue;
                }

                if (preg_match('/^([A-Z][a-z]+)\s+([A-Z]\. ?[A-Z]?\.?)/u', $part, $m)) {
                    $authors[] = ['last_name' => $m[1], 'initials' => trim($m[2])];

                    continue;
                }

                if (preg_match('/^([–ê-–Ø–Ü–á–Ñ“ê][–∞-—è—ñ—ó—î“ë‚Äô\'\-]+)\s+([–ê-–Ø–Ü–á–Ñ“ê]\. ?[–ê-–Ø–Ü–á–Ñ“ê]?\.?)/u', $part, $m)) {
                    $authors[] = ['last_name' => $m[1], 'initials' => trim($m[2])];

                    continue;
                }

                $authors[] = ['raw' => $part];
            }

            $data['authors'] = $authors;
        }

        // –ù–∞–∑–≤–∞
        if (preg_match('/\(\d{4}\)\.?\s*(.+)$/u', $raw, $matches)) {
            $data['title'] = trim($matches[1]);
        }

        // üåê –¢–∏–ø –¥–∂–µ—Ä–µ–ª–∞ (–µ–≤—Ä–∏—Å—Ç–∏–∫–∏)
        $lower = mb_strtolower($raw);

        if (preg_match('/(iso|iec|dstu|rfc|nist|gost|standard|—Å—Ç–∞–Ω–¥–∞—Ä—Ç)/i', $raw)) {
            $data['type'] = SourceTypeEnum::STANDARD->value; // 'standard';
        } elseif (preg_match('/(https?:\/\/|www\.|doi\.org)/i', $raw)) {
            $data['type'] = SourceTypeEnum::WEB->value; // 'web'; // website
        } elseif (preg_match('/(journal|–∂—É—Ä–Ω–∞–ª|—Ç–æ–º|–≤–∏–ø—É—Å–∫|volume|issue|no\.)/i', $raw)) {
            $data['type'] = SourceTypeEnum::ARTICLE->value; // 'article';
        } elseif (preg_match('/(report|–∑–≤—ñ—Ç|brief|review|–æ–≥–ª—è–¥)/i', $raw)) {
            $data['type'] = SourceTypeEnum::REPORT->value; // 'report';
        } elseif (preg_match('/(gdpr|law|regulation|reglament|–∑–∞–∫–æ–Ω|–Ω–æ—Ä–º–∞—Ç–∏–≤)/i', $raw)) {
            $data['type'] = SourceTypeEnum::LAW->value; // 'law';
        } elseif (preg_match('/(thesis|dissertation|–¥–∏—Å–µ—Ä—Ç–∞—Ü—ñ—è|–º–∞–≥—ñ—Å—Ç–µ—Ä—Å—å–∫–∞|–∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∞)/i', $raw)) {
            $data['type'] = SourceTypeEnum::THESIS->value; // 'thesis';
        } else {
            $data['type'] = SourceTypeEnum::BOOK->value; // 'book';
        }

        return $data;
    }
}
